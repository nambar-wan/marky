spring:
  application:
    name: marky

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  config:
    import: optional:file:.env[.properties]

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        show_sql: true
        format_sql: true


  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: postgres

    hikari:
      connection-init-sql: CREATE EXTENSION IF NOT EXISTS vector

  ai:
    model:
      chat: openai
      embedding: ollama

    openai:
      api-key: ${OPEN_AI_API_KEY}
      chat:
        options:
          model: gpt-4o
          temperature: 0.7
          internal-tool-execution-enabled: true
          # max-tokens: 1024

    chat:
      memory:
        repository:
          jdbc:
            initialize-schema: never

      observations:
        log-prompt: false       # 프롬프트 로그 찍기
        log-completion: false   # 모델 응답 로그 찍기
        include-error-logging: true

    tools:
      observations: true

    advisor:
      observations:
        enabled: true

    ollama:
      base-url: http://localhost:11434/
#      base-rul: https://34dd-211-195-194-162.ngrok-free.app/
      embedding:
        options:
          model: nomic-embed-text
          keep-alive: 5m


    vectorstore:
      pgvector:
        dimensions: 768
        initialize-schema: false
        max-document-batch-size: 10000
        index-type: hnsw
        distance-type: cosine-distance
        table-name: vector_store
        observations:
          include-query-rsponse: true # 벡터스토어 응답 로그 찍기
  #        remove-existing-vector-store-table: true

  data:
    redis:
      host: localhost
      port: 6379


jwt:
  duration:
    access: 36000000      # 5분 = 1000 * 60 * 5
    refresh: 604800000  # 7일 = 1000 * 60 * 60 * 24 * 7


google:
  oauth:
    client-id: ${GOOGLE_OAUTH_CLIENT_ID}
    client-secret: ${GOOGLE_OAUTH_CLIENT_SECRET}
    redirect-uri: "http://localhost:8080/auth/google/callback"
    token-uri: "https://oauth2.googleapis.com/token"
    user-info-uri: "https://www.googleapis.com/oauth2/v3/userinfo"



# 스프링 액츄에이터의 모든 메트릭 노출 활성화
management:
  endpoints:
    web:
      exposure:
        include: "*"

  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    org.springframework.ai: DEBUG

